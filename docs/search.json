[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"  Welcome STAT 2102: Applied Statistical Computing class. website contains comprehensive lecture notes supplements materials/codes given class. Course Description: course introduction R programming. learning basic programming components, defining variables vectors, learning different data structures R, students , via assignments, study advanced topics, conditionals, modular programming, data visualization, various R packages. Students also learn fundamental concepts computational complexity practice writing reports based data analyses. Course Objectives: purpose course introduce students R programming give experience statistical procedures. Students successfully complete course able :Manipulate wrangle data different structuresExplore data via visualization basic models exploratory data analysisTackle familiar statistical concepts using RCommunicate results obtained data analysis","code":""},{"path":"lecture-01.html","id":"lecture-01","chapter":"Lecture 01","heading":"Lecture 01","text":"","code":""},{"path":"lecture-01.html","id":"introduction","chapter":"Lecture 01","heading":"Introduction","text":"R programming language software environment statistical analysis, graphics representation, reporting. R created Ross Ihaka Robert Gentleman University Auckland, New Zealand, currently developed R Development Core Team. free charge open-source.Nowadays, many companies, universities, individuals backgrounds shifting towards using R, ():free open-source, available every major platform.Results produced R reproducible.R diverse supportive community, online offline.numerous set packages various tasks statistical analysis, data science, data visualization, reporting results etc.Powerful tools communicating results.RStudio IDE (Integrated Development Environment).Deep-seated language support data analysis.strong foundation functional programming.","code":""},{"path":"lecture-01.html","id":"getting-started-downloading-and-installing-r-rstudio","chapter":"Lecture 01","heading":"Getting Started: Downloading and Installing R & RStudio","text":"","code":""},{"path":"lecture-01.html","id":"installing-r","chapter":"Lecture 01","heading":"Installing R","text":"first thing need install R computer. works pretty much every platform available, including widely used Windows, Mac OS, Linux systems. can download R . Pick operating system follow instructions stated page. download R, install machine.","code":""},{"path":"lecture-01.html","id":"installing-rstudio-now-known-as-posit","chapter":"Lecture 01","heading":"Installing RStudio (now known as Posit)","text":"R old-fashion, old-school interface, less intuitive makes coding harder (especially beginners). Thus, using RStudio instead. RStudio IDE, Integrated Development Environment, user-friendly interface equipped many useful features. facilitates extensive code editing, development well various features make R easy language implement. using RStudio call R. can dowload RStudio .Note, order work RStudio, first need download install R.","code":""},{"path":"lecture-01.html","id":"rstudio-interface","chapter":"Lecture 01","heading":"RStudio Interface","text":"may initially overwhelmed different panes tabs available RStudio. , things, take little bit get used eventually learn love layout.RStudio 4 main panes:","code":""},{"path":"lecture-01.html","id":"code-editor-source-pane","chapter":"Lecture 01","heading":"Code Editor (Source Pane)","text":"likely pane spend majority time top left corner. ’s called Code Editor (.k.Source Pane). place create edit R Scripts (files \".R\" extension contain code). open RStudio, automatically start new Untitled script. start typing untitled R script, always save file new file name (example, \"script_1.R\"). way, something computer crashes ’re working, R code saved re-open RStudio.notice, typing code R scripts execute . run entire code, can click Run button top pane. , want execute specific line code, put cursor line press Command + Return Mac Control + Enter PC.","code":""},{"path":"lecture-01.html","id":"console-pane","chapter":"Lecture 01","heading":"Console Pane","text":"bottom left pane called Console. using Console way check work thoughts. Basically, Console place R code run executing R scripts. place output/results displayed.","code":""},{"path":"lecture-01.html","id":"environmenthistory-pane","chapter":"Lecture 01","heading":"Environment/History Pane","text":"Environment (.k.Global Environment, .k.Working Environment) tab (top right corner) shows names data objects ’ve defined current R session. can also see information objects contain.History tab simply shows history code ’ve previously evaluated Console.","code":""},{"path":"lecture-01.html","id":"output-pane","chapter":"Lecture 01","heading":"Output Pane","text":"bottom right pane RStudio contains tabs default useful place view variety miscellaneous information RStudio projects files.Files: leftmost tab shows file folder structure. shows files stored, called, folders may exist project folder.Plots/Viewer: shows resulting graphs/figures R code generated.Packages: shows packages downloaded computer. can also see packages loaded current working environment looking see check-mark exists next package name.Help: shows documentations R functions, datasets, packages available R.","code":""},{"path":"lecture-01.html","id":"r-as-a-calculator-operators","chapter":"Lecture 01","heading":"R as a Calculator: Operators","text":"operator symbol tells R perform specific mathematical logical manipulations. R language rich built-operators provides following types operators:Arithmetic OperatorsRelational OperatorsLogical OperatorsAssignment OperatorsIn lecture consider arithmetic assignment operators. Later , discuss relational logical ones.","code":""},{"path":"lecture-01.html","id":"arithmetic-operators","chapter":"Lecture 01","heading":"Arithmetic Operators","text":"R supports various arithmetic operations. words, can use R simple calculator. instance,following table shows basic arithmetic operators supported R language:","code":"\nprint(2 + 3)\n#> [1] 5\nprint(4*5 - 2/3)\n#> [1] 19.33333"},{"path":"lecture-01.html","id":"assignment-operators","chapter":"Lecture 01","heading":"Assignment Operators","text":"order create variable R, can use <- assignment symbol. example, let’s create variable x give value 4:Let’s create another variable y, equal 10:create variables, stored global environment available use operations. Now R knows x = 4 y = 10.Note, R case sensitive. mean? means R x X different objects. , now call X variable, R throw error tell object exist global environment:","code":"\nx <- 4\nprint(x)\n#> [1] 4\ny <- 10\nprint(y)\n#> [1] 10\nprint(x + y)\n#> [1] 14\nprint(X)\n#> Error in print(X): object 'X' not found"},{"path":"lecture-01.html","id":"working-with-the-global-environment","chapter":"Lecture 01","heading":"Working with the Global Environment","text":"","code":""},{"path":"lecture-01.html","id":"saving-the-global-environment","chapter":"Lecture 01","heading":"Saving the Global Environment","text":"’ve run long code produced valuable results, might want save output stored global environment now. , can execute following line code, saves global environment working directory (place computer R saves files):","code":"\nsave.image()"},{"path":"lecture-01.html","id":"removing-objects-from-the-global-environment","chapter":"Lecture 01","heading":"Removing Objects from the Global Environment","text":"remove specific object (suppose variable x) Global Environment, use rm() function:remove objects stored Global Environment, use rm(list = ls()) function:","code":"\nrm(x)\nrm(list = ls())"},{"path":"lecture-01.html","id":"listing-objects-stored-in-the-global-environment","chapter":"Lecture 01","heading":"Listing Objects Stored in the Global Environment","text":"list objects stored Global Environment, use ls() function:","code":"\nls()"},{"path":"lecture-01.html","id":"working-directory","chapter":"Lecture 01","heading":"Working Directory","text":"mentioned, R stores files working directory. check working directory machine , use getwd() function:","code":"\ngetwd()\n#> [1] \"C:/Users/alexp/OneDrive/Desktop/2102/Spring 24/2102\""},{"path":"lecture-01.html","id":"getting-help","chapter":"Lecture 01","heading":"Getting Help","text":"Sometimes don’t exactly know certain functions work. can use ? console followed function name figure inputs (arguments) function can utilized. example, let’s check mean() function works:Now output pane (bottom right pane) Help tab see information mean() function.","code":"\n?mean"},{"path":"lecture-02.html","id":"lecture-02","chapter":"Lecture 02","heading":"Lecture 02","text":"","code":""},{"path":"lecture-02.html","id":"data-types","chapter":"Lecture 02","heading":"Data Types","text":"programming, data types important concept. Variables can store data different types, different types can different things. correct processing, programming language must know can done particular value. example, addition performed words Hello world. Similarly, change numbers 5 -22 lower uppercase.Due , R feature called data types. Different kind values assign different data types help differentiate . types certain characteristics rules associated define properties.course consider following data types:NumericIntegersComplexLogicalCharactersThere data types available R, beyond scope class. Let’s get data types one--one.","code":""},{"path":"lecture-02.html","id":"numeric-data-type","chapter":"Lecture 02","heading":"Numeric Data Type","text":"may expect, numeric data type numerical values. create variable numeric data type, simply assign numeric value variable.Use class() function find type variable .","code":"\n\nx_num <- 1\n\nprint(x_num)\n#> [1] 1\n\ny_num <- -2.35\n\nprint(y_num)\n#> [1] -2.35\n\nclass(x_num)\n#> [1] \"numeric\"\n\nclass(y_num)\n#> [1] \"numeric\""},{"path":"lecture-02.html","id":"integers-data-type","chapter":"Lecture 02","heading":"Integers Data Type","text":"integers data type special case numeric data type used integer values. store value integer, need specify using .integer() function:input value integer (example, 2.85), .integer() function remove decimal points keep integers .Another way creating variable integer data type use integer followed L letter:","code":"\n\nx_int <- as.integer(2)\n\nprint(x_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\ny_int <- as.integer(2.85)\n\nprint(y_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\nz_int <- 4L\n\nprint(z_int)\n#> [1] 4\n\nclass(z_int)\n#> [1] \"integer\""},{"path":"lecture-02.html","id":"complex-data-type","chapter":"Lecture 02","heading":"Complex Data Type","text":"Complex data types used store numbers imaginary component. instance, 1 + 3i, 2 - 5i, 3 - 4i. class going use data type, good know .","code":"\n\nx_comp <- 20 + 6i\n\nprint(x_comp)\n#> [1] 20+6i\n\nclass(x_comp)\n#> [1] \"complex\""},{"path":"lecture-02.html","id":"logical-data-type","chapter":"Lecture 02","heading":"Logical Data Type","text":"logical data type stores logical (also known boolean) values TRUE FALSE:","code":"\n\nx_logical <- TRUE\n\nprint(x_logical)\n#> [1] TRUE\n\nclass(x_logical)\n#> [1] \"logical\"\n\ny_logical <- FALSE\n\nclass(y_logical)\n#> [1] \"logical\"\n\nz_logical <- T\n\nclass(z_logical)\n#> [1] \"logical\""},{"path":"lecture-02.html","id":"character-data-type","chapter":"Lecture 02","heading":"Character Data Type","text":"character data type stores character values strings. Strings R can contain alphabet, numbers, symbols. easiest way denote value character type R wrap value inside single double quotes: ","code":"\n\nx_char <- \"2102\"\n\nprint(x_char)\n#> [1] \"2102\"\n\nclass(x_char)\n#> [1] \"character\"\n\ny_char <- \"Welcome to STAT 2102!\"\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nclass(y_char)\n#> [1] \"character\""},{"path":"lecture-02.html","id":"converting-data-types","chapter":"Lecture 02","heading":"Converting Data Types","text":"R can convert values one data type another. R certain rules govern conversions.","code":""},{"path":"lecture-02.html","id":"converting-into-numeric-data-type","chapter":"Lecture 02","heading":"Converting into Numeric Data Type","text":"discuss convert data type numeric, let’s first introduce .numeric() function checks whether variable numeric data type:convert data type numeric, can use .numeric() function:converting integer type data numeric, .numeric() changes type keeps value isWhen converting complex data type, removes imaginary part numberWhen converting logical data type, TRUE value converted 1, FALSE converted 0Finally, character values can similarly converted numerical values string contains letters symbols, numeric value becomes NA","code":"\n\nis.numeric(x_num)\n#> [1] TRUE\n\nis.numeric(x_char)\n#> [1] FALSE\n\n######################################\nx_comp\n#> [1] 20+6i\n\nis.numeric(x_comp)\n#> [1] FALSE\n\nnum1 <- as.numeric(x_comp)\n#> Warning: imaginary parts discarded in coercion\n\nclass(num1)\n#> [1] \"numeric\"\n\nprint(num1)\n#> [1] 20\n\n######################################\n\nx_logical\n#> [1] TRUE\n\nlogical1 <- as.numeric(x_logical)\n\nclass(logical1)\n#> [1] \"numeric\"\n\nprint(logical1)\n#> [1] 1\n\n######################################\n\ny_logical\n#> [1] FALSE\n\nlogical2 <- as.numeric(y_logical)\n\nclass(logical2)\n#> [1] \"numeric\"\n\nprint(logical2)\n#> [1] 0\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nchar1 <- as.numeric(y_char)\n#> Warning: NAs introduced by coercion\n\nclass(char1)\n#> [1] \"numeric\"\n\nprint(char1)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nchar2 <- as.numeric(x_char)\n\nclass(char2)\n#> [1] \"numeric\"\n\nprint(char2)\n#> [1] 2102"},{"path":"lecture-02.html","id":"converting-into-integer-data-type","chapter":"Lecture 02","heading":"Converting into Integer Data Type","text":"convert data type integer, can use .integer() function. properties function similar stated , skip . (Try !)","code":""},{"path":"lecture-02.html","id":"converting-into-logical-data-type","chapter":"Lecture 02","heading":"Converting into Logical Data Type","text":"convert data type logical, can utilize .logical() function. returns FALSE value zero TRUE anything else. Character values converted .logical() function, always return NA:","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.logical(y_num)\n#> [1] FALSE\n\nlogi1 <- as.logical(y_num)\n\nclass(logi1)\n#> [1] \"logical\"\n\nprint(logi1)\n#> [1] TRUE\n\n\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nlogi2 <- as.logical(y_char)\n\nclass(logi2)\n#> [1] \"logical\"\n\nprint(logi2)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nlogi3 <- as.logical(x_char)\n\nclass(logi3)\n#> [1] \"logical\"\n\nprint(logi3)\n#> [1] NA"},{"path":"lecture-02.html","id":"converting-into-character-data-type","chapter":"Lecture 02","heading":"Converting into Character Data Type","text":"can convert data type character using .character() function. converts original value character string: ","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.character(y_num)\n#> [1] FALSE\n\nchar1 <- as.character(y_num)\n\nclass(char1)\n#> [1] \"character\"\n\nprint(char1)\n#> [1] \"-2.35\"\n\n######################################\n\nprint(x_comp)\n#> [1] 20+6i\n\nchar2 <- as.character(x_comp)\n\nclass(char2)\n#> [1] \"character\"\n\nprint(char2)\n#> [1] \"20+6i\""},{"path":"lecture-02.html","id":"data-structures","chapter":"Lecture 02","heading":"Data Structures","text":"programming language, need use different variables store different data. Unlike programming languages like C Java, R doesn’t variables declared data type. , variables appointed R-objects knowledge form R-object becomes datatype variable. many types R-objects (data structures). commonly used ones :VectorsListsMatricesData FramesFactorsIn lecture, discuss vectors lists. Later, go data structures well.","code":""},{"path":"lecture-02.html","id":"vectors","chapter":"Lecture 02","heading":"Vectors","text":"","code":""},{"path":"lecture-02.html","id":"creating-vectors","chapter":"Lecture 02","heading":"Creating Vectors","text":"Vector basic data structure R programming language. various ways creating vector. common way using c() function:can also use : operator create vector:Another way use seq() function:can consider one function, rep(), create vector:","code":"\n\nvec1 <- c(1, 2, 3, 4, 5)\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec2 <- c(\"fall\", \"winter\", \"spring\", \"summer\")\n\nprint(vec2)\n#> [1] \"fall\"   \"winter\" \"spring\" \"summer\"\n\nvec3 <- 3:11\n\nprint(vec3)\n#> [1]  3  4  5  6  7  8  9 10 11\n\nvec4 <- seq(from = 1, to = 5, by = 0.7)\n\nprint(vec4)\n#> [1] 1.0 1.7 2.4 3.1 3.8 4.5\n\n\nvec5 <- seq(from = 1, to = 5, length.out = 8)\n\nprint(vec5)\n#> [1] 1.000000 1.571429 2.142857 2.714286 3.285714 3.857143\n#> [7] 4.428571 5.000000\n\nvec6 <- rep(5, times = 3)\n\nprint(vec6)\n#> [1] 5 5 5\n\nvec7 <- rep(c(1,3,4), times = 2)\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nvec8 <- rep(c(\"apple\", \"orange\", \"mango\"), times = 2, each = 3)\n\nprint(vec8)\n#>  [1] \"apple\"  \"apple\"  \"apple\"  \"orange\" \"orange\" \"orange\"\n#>  [7] \"mango\"  \"mango\"  \"mango\"  \"apple\"  \"apple\"  \"apple\" \n#> [13] \"orange\" \"orange\" \"orange\" \"mango\"  \"mango\"  \"mango\""},{"path":"lecture-02.html","id":"how-many-elements-does-your-vector-contain","chapter":"Lecture 02","heading":"How Many Elements Does Your Vector Contain?","text":"can use length() function check many elements stored vectors:","code":"\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nlength(vec7)\n#> [1] 6"},{"path":"lecture-02.html","id":"adding-elements-to-vectors","chapter":"Lecture 02","heading":"Adding Elements to Vectors","text":"order add new elements existing vector, can utilize c() function :like insert element(s) specific position(s) vector, use append() function:","code":"\n\n# Adding three elements, c(15, 3, 4), to vec1\n\nvec9 <- c(vec1, c(15, 3, 4))\n\nprint(vec9)\n#> [1]  1  2  3  4  5 15  3  4\n\n# Merging vec1 and vec3\n\nvec10 <- c(vec1, vec3)\n\nprint(vec10)\n#>  [1]  1  2  3  4  5  3  4  5  6  7  8  9 10 11\n\n# Insert 55 to vec1 at the 2nd position\n\nvec11 <- append(vec1, 55, after = 1) \n\nprint(vec11)\n#> [1]  1 55  2  3  4  5"},{"path":"lecture-02.html","id":"subsettingindexing-vectors","chapter":"Lecture 02","heading":"Subsetting/Indexing Vectors","text":"use square brackets, [], extract specific elements vectors:","code":"\n\n# selects the first element of the vec1\n\nvec1[1]  \n#> [1] 1\n\n# selects the 1st, 5th, and 8th elements of the vec9\n\nvec9[c(1,5,8)]  \n#> [1] 1 5 4\n\n# selects the 4th, 5th, 6th, and 7th elements of the vec9\n\nvec9[4:7] \n#> [1]  4  5 15  3\n\n# selects the first and second elements of vec1\n\nvec1[c(T, T, F, F, F,F)]  \n#> [1] 1 2\n\n# select all elements of vec1 that are greater than 2.5\n\nvec1[vec1 > 2.5] \n#> [1] 3 4 5\n\n# select all elements of vec1 that are not equal to 3\n\nvec1[vec1 != 3] \n#> [1] 1 2 4 5\n\n# selects all elements of vec1 except the 4th one\n\nvec2[-4]  \n#> [1] \"fall\"   \"winter\" \"spring\"\n\n# selects all elements of vec1 except the 1st and 2nd ones\n\nvec2[c(-1, -2)]                \n#> [1] \"spring\" \"summer\""},{"path":"lecture-02.html","id":"assigning-new-values-to-elements-of-the-existing-vector","chapter":"Lecture 02","heading":"Assigning New Values to Elements of the Existing Vector","text":"Use assignment operator, <-, assign new values elements existing vector:","code":"\n\n# Assigning a new value to the first element of vec1\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec1[1] <- 100\n\nprint(vec1)\n#> [1] 100   2   3   4   5"},{"path":"lecture-02.html","id":"vectorization","chapter":"Lecture 02","heading":"Vectorization","text":"main advantage vectors R can perform vectorized operations :","code":"\n\n# Adding 1 to each element of vec1\n\nprint(vec1 + 1)\n#> [1] 101   3   4   5   6\n\n# For each element of the vector (1:3), raising 2 to the power of its elements\n\nprint(2^(1:3))\n#> [1] 2 4 8\n\n# Doing elementwise addition (you can do it with all arithmetic operations)\n\nprint(c(1, 2, 3) + c(4, 5, 6))\n#> [1] 5 7 9\n\n# Be careful! vectors should have the same length, otherwise it will recycle\n# values of the shorter vector\n\nprint(c(1, 2, 3) + c(4, 5, 6, 7)) \n#> Warning in c(1, 2, 3) + c(4, 5, 6, 7): longer object length\n#> is not a multiple of shorter object length\n#> [1] 5 7 9 8\n\n# Checking whether 2 is in vec1 using %in% function\n\nprint(2 %in% vec1)\n#> [1] TRUE"},{"path":"lecture-02.html","id":"vectors-are-homogeneous","chapter":"Lecture 02","heading":"Vectors Are Homogeneous!","text":"main disadvantage vectors R can store homogeneous data (data type). elements vector different data types, vector convert types elements type: Question: want store heterogeneous data (data different types)?Solution: Use Lists. ","code":"\n\n# R will convert all elements of vec12 into characters, because vectors can only \n#contain homogeneous data\n\nvec12 <- c(2, 3.5, \"fall\", 2.7)   \n\nprint(vec12)\n#> [1] \"2\"    \"3.5\"  \"fall\" \"2.7\"\n\nclass(vec12)\n#> [1] \"character\""},{"path":"lecture-02.html","id":"lists","chapter":"Lecture 02","heading":"Lists","text":"","code":""},{"path":"lecture-02.html","id":"creating-lists","chapter":"Lecture 02","heading":"Creating Lists","text":"can create list using list() function:","code":"\n\nlist1 <- list(2, 3.5, \"fall\", 2.7)\n\nprint(list1)\n#> [[1]]\n#> [1] 2\n#> \n#> [[2]]\n#> [1] 3.5\n#> \n#> [[3]]\n#> [1] \"fall\"\n#> \n#> [[4]]\n#> [1] 2.7\n\n\nlist2 <- list(c(2,4,10), c(\"one\", \"two\", \"three\"), 45)\n\nprint(list2)\n#> [[1]]\n#> [1]  2  4 10\n#> \n#> [[2]]\n#> [1] \"one\"   \"two\"   \"three\"\n#> \n#> [[3]]\n#> [1] 45"},{"path":"lecture-02.html","id":"subsettingindexing-lists-using-square-brackets-single-and-double-and","chapter":"Lecture 02","heading":"Subsetting/Indexing Lists Using Square Brackets (Single and Double), [] and [[]]","text":"","code":"\n\n# Selecting the first element of the list2 as a list\n\nlist2[1] \n#> [[1]]\n#> [1]  2  4 10\n\n# Selecting the first element of the list2 as it is\n\nlist2[[1]]                                    \n#> [1]  2  4 10\n\n# Selecting the second element of the first element of the list2\n\nlist2[[1]][2]                                 \n#> [1] 4"},{"path":"lecture-02.html","id":"merging-lists","chapter":"Lecture 02","heading":"Merging Lists","text":"can merge lists using c() list() functions. Can tell difference outputs functions produce?c() function merged elements list list b created list containing 6 elements. contrast, list() function created list containing two elements, list list b.","code":"\n\na <- list(1, 2, 3)\n\nb <- list (4, 5, 6)\n\nmerged_list1 <- c(a, b) \n\nprint(merged_list1)\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 2\n#> \n#> [[3]]\n#> [1] 3\n#> \n#> [[4]]\n#> [1] 4\n#> \n#> [[5]]\n#> [1] 5\n#> \n#> [[6]]\n#> [1] 6\n\nmerged_list2 <- list(a, b)  \n\nprint(merged_list2)\n#> [[1]]\n#> [[1]][[1]]\n#> [1] 1\n#> \n#> [[1]][[2]]\n#> [1] 2\n#> \n#> [[1]][[3]]\n#> [1] 3\n#> \n#> \n#> [[2]]\n#> [[2]][[1]]\n#> [1] 4\n#> \n#> [[2]][[2]]\n#> [1] 5\n#> \n#> [[2]][[3]]\n#> [1] 6"},{"path":"lecture-02.html","id":"flattening-lists-into-vectors","chapter":"Lecture 02","heading":"Flattening Lists into Vectors","text":"can convert list vector using unlist() function:","code":"\n\nlist3 <- list (c(1,2,3), 45, c(20, -5))\n\nunlist(list3)                           \n#> [1]  1  2  3 45 20 -5"},{"path":"lecture-02.html","id":"manipulating-elements-in-a-list","chapter":"Lecture 02","heading":"Manipulating Elements in a List","text":"Adding element list:Removing element list:Changing values elements list:","code":"\n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n\nlist3[4] <- 100   \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n#> \n#> [[4]]\n#> [1] 100\n\n# Removing the second element in the list3\n\nlist3[2] <- NULL                           \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100\n\n# Changing the second element of the first element of the list3\n\nlist3[[1]][3] <- 50                       \n\nprint(list3)\n#> [[1]]\n#> [1]  1  2 50\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100"}]
