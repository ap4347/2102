[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"  Welcome STAT 2102: Applied Statistical Computing class. website contains comprehensive lecture notes supplements materials/codes given class. Course Description: course introduction R programming. learning basic programming components, defining variables vectors, learning different data structures R, students , via assignments, study advanced topics, conditionals, modular programming, data visualization, various R packages. Students also learn fundamental concepts computational complexity practice writing reports based data analyses. Course Objectives: purpose course introduce students R programming give experience statistical procedures. Students successfully complete course able :Manipulate wrangle data different structuresExplore data via visualization basic models exploratory data analysisTackle familiar statistical concepts using RCommunicate results obtained data analysis","code":""},{"path":"lecture-01.html","id":"lecture-01","chapter":"Lecture 01","heading":"Lecture 01","text":"","code":""},{"path":"lecture-01.html","id":"introduction","chapter":"Lecture 01","heading":"Introduction","text":"R programming language software environment statistical analysis, graphics representation, reporting. R created Ross Ihaka Robert Gentleman University Auckland, New Zealand, currently developed R Development Core Team. free charge open-source.Nowadays, many companies, universities, individuals backgrounds shifting towards using R, ():free open-source, available every major platform.Results produced R reproducible.R diverse supportive community, online offline.numerous set packages various tasks statistical analysis, data science, data visualization, reporting results etc.Powerful tools communicating results.RStudio IDE (Integrated Development Environment).Deep-seated language support data analysis.strong foundation functional programming.","code":""},{"path":"lecture-01.html","id":"getting-started-downloading-and-installing-r-rstudio","chapter":"Lecture 01","heading":"Getting Started: Downloading and Installing R & RStudio","text":"","code":""},{"path":"lecture-01.html","id":"installing-r","chapter":"Lecture 01","heading":"Installing R","text":"first thing need install R computer. works pretty much every platform available, including widely used Windows, Mac OS, Linux systems. can download R . Pick operating system follow instructions stated page. download R, install machine.","code":""},{"path":"lecture-01.html","id":"installing-rstudio-now-known-as-posit","chapter":"Lecture 01","heading":"Installing RStudio (now known as Posit)","text":"R old-fashion, old-school interface, less intuitive makes coding harder (especially beginners). Thus, using RStudio instead. RStudio IDE, Integrated Development Environment, user-friendly interface equipped many useful features. facilitates extensive code editing, development well various features make R easy language implement. using RStudio call R. can dowload RStudio .Note, order work RStudio, first need download install R.","code":""},{"path":"lecture-01.html","id":"rstudio-interface","chapter":"Lecture 01","heading":"RStudio Interface","text":"may initially overwhelmed different panes tabs available RStudio. , things, take little bit get used eventually learn love layout.RStudio 4 main panes:","code":""},{"path":"lecture-01.html","id":"code-editor-source-pane","chapter":"Lecture 01","heading":"Code Editor (Source Pane)","text":"likely pane spend majority time top left corner. ’s called Code Editor (.k.Source Pane). place create edit R Scripts (files \".R\" extension contain code). open RStudio, automatically start new Untitled script. start typing untitled R script, always save file new file name (example, \"script_1.R\"). way, something computer crashes ’re working, R code saved re-open RStudio.notice, typing code R scripts execute . run entire code, can click Run button top pane. , want execute specific line code, put cursor line press Command + Return Mac Control + Enter PC.","code":""},{"path":"lecture-01.html","id":"console-pane","chapter":"Lecture 01","heading":"Console Pane","text":"bottom left pane called Console. using Console way check work thoughts. Basically, Console place R code run executing R scripts. place output/results displayed.","code":""},{"path":"lecture-01.html","id":"environmenthistory-pane","chapter":"Lecture 01","heading":"Environment/History Pane","text":"Environment (.k.Global Environment, .k.Working Environment) tab (top right corner) shows names data objects ’ve defined current R session. can also see information objects contain.History tab simply shows history code ’ve previously evaluated Console.","code":""},{"path":"lecture-01.html","id":"output-pane","chapter":"Lecture 01","heading":"Output Pane","text":"bottom right pane RStudio contains tabs default useful place view variety miscellaneous information RStudio projects files.Files: leftmost tab shows file folder structure. shows files stored, called, folders may exist project folder.Plots/Viewer: shows resulting graphs/figures R code generated.Packages: shows packages downloaded computer. can also see packages loaded current working environment looking see check-mark exists next package name.Help: shows documentations R functions, datasets, packages available R.","code":""},{"path":"lecture-01.html","id":"r-as-a-calculator-operators","chapter":"Lecture 01","heading":"R as a Calculator: Operators","text":"operator symbol tells R perform specific mathematical logical manipulations. R language rich built-operators provides following types operators:Arithmetic OperatorsRelational OperatorsLogical OperatorsAssignment OperatorsIn lecture consider arithmetic assignment operators. Later , discuss relational logical ones.","code":""},{"path":"lecture-01.html","id":"arithmetic-operators","chapter":"Lecture 01","heading":"Arithmetic Operators","text":"R supports various arithmetic operations. words, can use R simple calculator. instance,following table shows basic arithmetic operators supported R language:","code":"\nprint(2 + 3)\n#> [1] 5\nprint(4*5 - 2/3)\n#> [1] 19.33333"},{"path":"lecture-01.html","id":"assignment-operators","chapter":"Lecture 01","heading":"Assignment Operators","text":"order create variable R, can use <- assignment symbol. example, let’s create variable x give value 4:Let’s create another variable y, equal 10:create variables, stored global environment available use operations. Now R knows x = 4 y = 10.Note, R case sensitive. mean? means R x X different objects. , now call X variable, R throw error tell object exist global environment:","code":"\nx <- 4\nprint(x)\n#> [1] 4\ny <- 10\nprint(y)\n#> [1] 10\nprint(x + y)\n#> [1] 14\nprint(X)\n#> Error in print(X): object 'X' not found"},{"path":"lecture-01.html","id":"working-with-the-global-environment","chapter":"Lecture 01","heading":"Working with the Global Environment","text":"","code":""},{"path":"lecture-01.html","id":"saving-the-global-environment","chapter":"Lecture 01","heading":"Saving the Global Environment","text":"’ve run long code produced valuable results, might want save output stored global environment now. , can execute following line code, saves global environment working directory (place computer R saves files):","code":"\nsave.image()"},{"path":"lecture-01.html","id":"removing-objects-from-the-global-environment","chapter":"Lecture 01","heading":"Removing Objects from the Global Environment","text":"remove specific object (suppose variable x) Global Environment, use rm() function:remove objects stored Global Environment, use rm(list = ls()) function:","code":"\nrm(x)\nrm(list = ls())"},{"path":"lecture-01.html","id":"listing-objects-stored-in-the-global-environment","chapter":"Lecture 01","heading":"Listing Objects Stored in the Global Environment","text":"list objects stored Global Environment, use ls() function:","code":"\nls()"},{"path":"lecture-01.html","id":"working-directory","chapter":"Lecture 01","heading":"Working Directory","text":"mentioned, R stores files working directory. check working directory machine , use getwd() function:","code":"\ngetwd()\n#> [1] \"C:/Users/alexp/OneDrive/Desktop/2102/Fall 23/2102\""},{"path":"lecture-01.html","id":"getting-help","chapter":"Lecture 01","heading":"Getting Help","text":"Sometimes don’t exactly know certain functions work. can use ? console followed function name figure inputs (arguments) function can utilized. example, let’s check mean() function works:Now output pane (bottom right pane) Help tab see information mean() function.","code":"\n?mean"},{"path":"lecture-02.html","id":"lecture-02","chapter":"Lecture 02","heading":"Lecture 02","text":"","code":""},{"path":"lecture-02.html","id":"data-types","chapter":"Lecture 02","heading":"Data Types","text":"programming, data types important concept. Variables can store data different types, different types can different things. correct processing, programming language must know can done particular value. example, addition performed words Hello world. Similarly, change numbers 5 -22 lower uppercase.Due , R feature called data types. Different kind values assign different data types help differentiate . types certain characteristics rules associated define properties.course consider following data types:NumericIntegersComplexLogicalCharactersThere data types available R, beyond scope class. Let’s get data types one--one.","code":""},{"path":"lecture-02.html","id":"numeric-data-type","chapter":"Lecture 02","heading":"Numeric Data Type","text":"may expect, numeric data type numerical values. create variable numeric data type, simply assign numeric value variable.Use class() function find type variable .","code":"\n\nx_num <- 1\n\nprint(x_num)\n#> [1] 1\n\ny_num <- -2.35\n\nprint(y_num)\n#> [1] -2.35\n\nclass(x_num)\n#> [1] \"numeric\"\n\nclass(y_num)\n#> [1] \"numeric\""},{"path":"lecture-02.html","id":"integers-data-type","chapter":"Lecture 02","heading":"Integers Data Type","text":"integers data type special case numeric data type used integer values. store value integer, need specify using .integer() function:input value integer (example, 2.85), .integer() function remove decimal points keep integers .Another way creating variable integer data type use integer followed L letter:","code":"\n\nx_int <- as.integer(2)\n\nprint(x_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\ny_int <- as.integer(2.85)\n\nprint(y_int)\n#> [1] 2\n\nclass(x_int)\n#> [1] \"integer\"\n\nz_int <- 4L\n\nprint(z_int)\n#> [1] 4\n\nclass(z_int)\n#> [1] \"integer\""},{"path":"lecture-02.html","id":"complex-data-type","chapter":"Lecture 02","heading":"Complex Data Type","text":"Complex data types used store numbers imaginary component. instance, 1 + 3i, 2 - 5i, 3 - 4i. class going use data type, good know .","code":"\n\nx_comp <- 20 + 6i\n\nprint(x_comp)\n#> [1] 20+6i\n\nclass(x_comp)\n#> [1] \"complex\""},{"path":"lecture-02.html","id":"logical-data-type","chapter":"Lecture 02","heading":"Logical Data Type","text":"logical data type stores logical (also known boolean) values TRUE FALSE:","code":"\n\nx_logical <- TRUE\n\nprint(x_logical)\n#> [1] TRUE\n\nclass(x_logical)\n#> [1] \"logical\"\n\ny_logical <- FALSE\n\nclass(y_logical)\n#> [1] \"logical\"\n\nz_logical <- T\n\nclass(z_logical)\n#> [1] \"logical\""},{"path":"lecture-02.html","id":"character-data-type","chapter":"Lecture 02","heading":"Character Data Type","text":"character data type stores character values strings. Strings R can contain alphabet, numbers, symbols. easiest way denote value character type R wrap value inside single double quotes: ","code":"\n\nx_char <- \"2102\"\n\nprint(x_char)\n#> [1] \"2102\"\n\nclass(x_char)\n#> [1] \"character\"\n\ny_char <- \"Welcome to STAT 2102!\"\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nclass(y_char)\n#> [1] \"character\""},{"path":"lecture-02.html","id":"converting-data-types","chapter":"Lecture 02","heading":"Converting Data Types","text":"R can convert values one data type another. R certain rules govern conversions.","code":""},{"path":"lecture-02.html","id":"converting-into-numeric-data-type","chapter":"Lecture 02","heading":"Converting into Numeric Data Type","text":"discuss convert data type numeric, let’s first introduce .numeric() function checks whether variable numeric data type:convert data type numeric, can use .numeric() function:converting integer type data numeric, .numeric() changes type keeps value isWhen converting complex data type, removes imaginary part numberWhen converting logical data type, TRUE value converted 1, FALSE converted 0Finally, character values can similarly converted numerical values string contains letters symbols, numeric value becomes NA","code":"\n\nis.numeric(x_num)\n#> [1] TRUE\n\nis.numeric(x_char)\n#> [1] FALSE\n\n######################################\nx_comp\n#> [1] 20+6i\n\nis.numeric(x_comp)\n#> [1] FALSE\n\nnum1 <- as.numeric(x_comp)\n#> Warning: imaginary parts discarded in coercion\n\nclass(num1)\n#> [1] \"numeric\"\n\nprint(num1)\n#> [1] 20\n\n######################################\n\nx_logical\n#> [1] TRUE\n\nlogical1 <- as.numeric(x_logical)\n\nclass(logical1)\n#> [1] \"numeric\"\n\nprint(logical1)\n#> [1] 1\n\n######################################\n\ny_logical\n#> [1] FALSE\n\nlogical2 <- as.numeric(y_logical)\n\nclass(logical2)\n#> [1] \"numeric\"\n\nprint(logical2)\n#> [1] 0\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nchar1 <- as.numeric(y_char)\n#> Warning: NAs introduced by coercion\n\nclass(char1)\n#> [1] \"numeric\"\n\nprint(char1)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nchar2 <- as.numeric(x_char)\n\nclass(char2)\n#> [1] \"numeric\"\n\nprint(char2)\n#> [1] 2102"},{"path":"lecture-02.html","id":"converting-into-integer-data-type","chapter":"Lecture 02","heading":"Converting into Integer Data Type","text":"convert data type integer, can use .integer() function. properties function similar stated , skip . (Try !)","code":""},{"path":"lecture-02.html","id":"converting-into-logical-data-type","chapter":"Lecture 02","heading":"Converting into Logical Data Type","text":"convert data type logical, can utilize .logical() function. returns FALSE value zero TRUE anything else. Character values converted .logical() function, always return NA:","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.logical(y_num)\n#> [1] FALSE\n\nlogi1 <- as.logical(y_num)\n\nclass(logi1)\n#> [1] \"logical\"\n\nprint(logi1)\n#> [1] TRUE\n\n\n\n######################################\n\nprint(y_char)\n#> [1] \"Welcome to STAT 2102!\"\n\nlogi2 <- as.logical(y_char)\n\nclass(logi2)\n#> [1] \"logical\"\n\nprint(logi2)\n#> [1] NA\n\n######################################\n\nprint(x_char)\n#> [1] \"2102\"\n\nlogi3 <- as.logical(x_char)\n\nclass(logi3)\n#> [1] \"logical\"\n\nprint(logi3)\n#> [1] NA"},{"path":"lecture-02.html","id":"converting-into-character-data-type","chapter":"Lecture 02","heading":"Converting into Character Data Type","text":"can convert data type character using .character() function. converts original value character string: ","code":"\n\n######################################\nprint(y_num)\n#> [1] -2.35\n\nis.character(y_num)\n#> [1] FALSE\n\nchar1 <- as.character(y_num)\n\nclass(char1)\n#> [1] \"character\"\n\nprint(char1)\n#> [1] \"-2.35\"\n\n######################################\n\nprint(x_comp)\n#> [1] 20+6i\n\nchar2 <- as.character(x_comp)\n\nclass(char2)\n#> [1] \"character\"\n\nprint(char2)\n#> [1] \"20+6i\""},{"path":"lecture-02.html","id":"data-structures","chapter":"Lecture 02","heading":"Data Structures","text":"programming language, need use different variables store different data. Unlike programming languages like C Java, R doesn’t variables declared data type. , variables appointed R-objects knowledge form R-object becomes datatype variable. many types R-objects (data structures). commonly used ones :VectorsListsMatricesData FramesFactorsIn lecture, discuss vectors lists. Later, go data structures well.","code":""},{"path":"lecture-02.html","id":"vectors","chapter":"Lecture 02","heading":"Vectors","text":"","code":""},{"path":"lecture-02.html","id":"creating-vectors","chapter":"Lecture 02","heading":"Creating Vectors","text":"Vector basic data structure R programming language. various ways creating vector. common way using c() function:can also use : operator create vector:Another way use seq() function:can consider one function, rep(), create vector:","code":"\n\nvec1 <- c(1, 2, 3, 4, 5)\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec2 <- c(\"fall\", \"winter\", \"spring\", \"summer\")\n\nprint(vec2)\n#> [1] \"fall\"   \"winter\" \"spring\" \"summer\"\n\nvec3 <- 3:11\n\nprint(vec3)\n#> [1]  3  4  5  6  7  8  9 10 11\n\nvec4 <- seq(from = 1, to = 5, by = 0.7)\n\nprint(vec4)\n#> [1] 1.0 1.7 2.4 3.1 3.8 4.5\n\n\nvec5 <- seq(from = 1, to = 5, length.out = 8)\n\nprint(vec5)\n#> [1] 1.000000 1.571429 2.142857 2.714286 3.285714 3.857143\n#> [7] 4.428571 5.000000\n\nvec6 <- rep(5, times = 3)\n\nprint(vec6)\n#> [1] 5 5 5\n\nvec7 <- rep(c(1,3,4), times = 2)\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nvec8 <- rep(c(\"apple\", \"orange\", \"mango\"), times = 2, each = 3)\n\nprint(vec8)\n#>  [1] \"apple\"  \"apple\"  \"apple\"  \"orange\" \"orange\" \"orange\"\n#>  [7] \"mango\"  \"mango\"  \"mango\"  \"apple\"  \"apple\"  \"apple\" \n#> [13] \"orange\" \"orange\" \"orange\" \"mango\"  \"mango\"  \"mango\""},{"path":"lecture-02.html","id":"how-many-elements-does-your-vector-contain","chapter":"Lecture 02","heading":"How Many Elements Does Your Vector Contain?","text":"can use length() function check many elements stored vectors:","code":"\n\nprint(vec7)\n#> [1] 1 3 4 1 3 4\n\nlength(vec7)\n#> [1] 6"},{"path":"lecture-02.html","id":"adding-elements-to-vectors","chapter":"Lecture 02","heading":"Adding Elements to Vectors","text":"order add new elements existing vector, can utilize c() function :like insert element(s) specific position(s) vector, use append() function:","code":"\n\n# Adding three elements, c(15, 3, 4), to vec1\n\nvec9 <- c(vec1, c(15, 3, 4))\n\nprint(vec9)\n#> [1]  1  2  3  4  5 15  3  4\n\n# Merging vec1 and vec3\n\nvec10 <- c(vec1, vec3)\n\nprint(vec10)\n#>  [1]  1  2  3  4  5  3  4  5  6  7  8  9 10 11\n\n# Insert 55 to vec1 at the 2nd position\n\nvec11 <- append(vec1, 55, after = 1) \n\nprint(vec11)\n#> [1]  1 55  2  3  4  5"},{"path":"lecture-02.html","id":"subsettingindexing-vectors","chapter":"Lecture 02","heading":"Subsetting/Indexing Vectors","text":"use square brackets, [], extract specific elements vectors:","code":"\n\n# selects the first element of the vec1\n\nvec1[1]  \n#> [1] 1\n\n# selects the 1st, 5th, and 8th elements of the vec9\n\nvec9[c(1,5,8)]  \n#> [1] 1 5 4\n\n# selects the 4th, 5th, 6th, and 7th elements of the vec9\n\nvec9[4:7] \n#> [1]  4  5 15  3\n\n# selects the first and second elements of vec1\n\nvec1[c(T, T, F, F, F,F)]  \n#> [1] 1 2\n\n# select all elements of vec1 that are greater than 2.5\n\nvec1[vec1 > 2.5] \n#> [1] 3 4 5\n\n# select all elements of vec1 that are not equal to 3\n\nvec1[vec1 != 3] \n#> [1] 1 2 4 5\n\n# selects all elements of vec1 except the 4th one\n\nvec2[-4]  \n#> [1] \"fall\"   \"winter\" \"spring\"\n\n# selects all elements of vec1 except the 1st and 2nd ones\n\nvec2[c(-1, -2)]                \n#> [1] \"spring\" \"summer\""},{"path":"lecture-02.html","id":"assigning-new-values-to-elements-of-the-existing-vector","chapter":"Lecture 02","heading":"Assigning New Values to Elements of the Existing Vector","text":"Use assignment operator, <-, assign new values elements existing vector:","code":"\n\n# Assigning a new value to the first element of vec1\n\nprint(vec1)\n#> [1] 1 2 3 4 5\n\nvec1[1] <- 100\n\nprint(vec1)\n#> [1] 100   2   3   4   5"},{"path":"lecture-02.html","id":"vectorization","chapter":"Lecture 02","heading":"Vectorization","text":"main advantage vectors R can perform vectorized operations :","code":"\n\n# Adding 1 to each element of vec1\n\nprint(vec1 + 1)\n#> [1] 101   3   4   5   6\n\n# For each element of the vector (1:3), raising 2 to the power of its elements\n\nprint(2^(1:3))\n#> [1] 2 4 8\n\n# Doing elementwise addition (you can do it with all arithmetic operations)\n\nprint(c(1, 2, 3) + c(4, 5, 6))\n#> [1] 5 7 9\n\n# Be careful! vectors should have the same length, otherwise it will recycle\n# values of the shorter vector\n\nprint(c(1, 2, 3) + c(4, 5, 6, 7)) \n#> Warning in c(1, 2, 3) + c(4, 5, 6, 7): longer object length\n#> is not a multiple of shorter object length\n#> [1] 5 7 9 8\n\n# Checking whether 2 is in vec1 using %in% function\n\nprint(2 %in% vec1)\n#> [1] TRUE"},{"path":"lecture-02.html","id":"vectors-are-homogeneous","chapter":"Lecture 02","heading":"Vectors Are Homogeneous!","text":"main disadvantage vectors R can store homogeneous data (data type). elements vector different data types, vector convert types elements type: Question: want store heterogeneous data (data different types)?Solution: Use Lists. ","code":"\n\n# R will convert all elements of vec12 into characters, because vectors can only \n#contain homogeneous data\n\nvec12 <- c(2, 3.5, \"fall\", 2.7)   \n\nprint(vec12)\n#> [1] \"2\"    \"3.5\"  \"fall\" \"2.7\"\n\nclass(vec12)\n#> [1] \"character\""},{"path":"lecture-02.html","id":"lists","chapter":"Lecture 02","heading":"Lists","text":"","code":""},{"path":"lecture-02.html","id":"creating-lists","chapter":"Lecture 02","heading":"Creating Lists","text":"can create list using list() function:","code":"\n\nlist1 <- list(2, 3.5, \"fall\", 2.7)\n\nprint(list1)\n#> [[1]]\n#> [1] 2\n#> \n#> [[2]]\n#> [1] 3.5\n#> \n#> [[3]]\n#> [1] \"fall\"\n#> \n#> [[4]]\n#> [1] 2.7\n\n\nlist2 <- list(c(2,4,10), c(\"one\", \"two\", \"three\"), 45)\n\nprint(list2)\n#> [[1]]\n#> [1]  2  4 10\n#> \n#> [[2]]\n#> [1] \"one\"   \"two\"   \"three\"\n#> \n#> [[3]]\n#> [1] 45"},{"path":"lecture-02.html","id":"subsettingindexing-lists-using-square-brackets-single-and-double-and","chapter":"Lecture 02","heading":"Subsetting/Indexing Lists Using Square Brackets (Single and Double), [] and [[]]","text":"","code":"\n\n# Selecting the first element of the list2 as a list\n\nlist2[1] \n#> [[1]]\n#> [1]  2  4 10\n\n# Selecting the first element of the list2 as it is\n\nlist2[[1]]                                    \n#> [1]  2  4 10\n\n# Selecting the second element of the first element of the list2\n\nlist2[[1]][2]                                 \n#> [1] 4"},{"path":"lecture-02.html","id":"merging-lists","chapter":"Lecture 02","heading":"Merging Lists","text":"can merge lists using c() list() functions. Can tell difference outputs functions produce?c() function merged elements list list b created list containing 6 elements. contrast, list() function created list containing two elements, list list b.","code":"\n\na <- list(1, 2, 3)\n\nb <- list (4, 5, 6)\n\nmerged_list1 <- c(a, b) \n\nprint(merged_list1)\n#> [[1]]\n#> [1] 1\n#> \n#> [[2]]\n#> [1] 2\n#> \n#> [[3]]\n#> [1] 3\n#> \n#> [[4]]\n#> [1] 4\n#> \n#> [[5]]\n#> [1] 5\n#> \n#> [[6]]\n#> [1] 6\n\nmerged_list2 <- list(a, b)  \n\nprint(merged_list2)\n#> [[1]]\n#> [[1]][[1]]\n#> [1] 1\n#> \n#> [[1]][[2]]\n#> [1] 2\n#> \n#> [[1]][[3]]\n#> [1] 3\n#> \n#> \n#> [[2]]\n#> [[2]][[1]]\n#> [1] 4\n#> \n#> [[2]][[2]]\n#> [1] 5\n#> \n#> [[2]][[3]]\n#> [1] 6"},{"path":"lecture-02.html","id":"flattening-lists-into-vectors","chapter":"Lecture 02","heading":"Flattening Lists into Vectors","text":"can convert list vector using unlist() function:","code":"\n\nlist3 <- list (c(1,2,3), 45, c(20, -5))\n\nunlist(list3)                           \n#> [1]  1  2  3 45 20 -5"},{"path":"lecture-02.html","id":"manipulating-elements-in-a-list","chapter":"Lecture 02","heading":"Manipulating Elements in a List","text":"Adding element list:Removing element list:Changing values elements list:","code":"\n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n\nlist3[4] <- 100   \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 45\n#> \n#> [[3]]\n#> [1] 20 -5\n#> \n#> [[4]]\n#> [1] 100\n\n# Removing the second element in the list3\n\nlist3[2] <- NULL                           \n\nprint(list3)\n#> [[1]]\n#> [1] 1 2 3\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100\n\n# Changing the second element of the first element of the list3\n\nlist3[[1]][3] <- 50                       \n\nprint(list3)\n#> [[1]]\n#> [1]  1  2 50\n#> \n#> [[2]]\n#> [1] 20 -5\n#> \n#> [[3]]\n#> [1] 100"},{"path":"lecture-03.html","id":"lecture-03","chapter":"Lecture 03","heading":"Lecture 03","text":" continue exploring different data structures R programming language. lecture discuss matrices data frames.","code":""},{"path":"lecture-03.html","id":"matrices","chapter":"Lecture 03","heading":"Matrices","text":"Matrices R objects elements arranged two-dimensional rectangular layout (columns rows). column vertical representation data, row horizontal representation data. Like vectors, matrices work homogeneous data .","code":""},{"path":"lecture-03.html","id":"creating-matrices","chapter":"Lecture 03","heading":"Creating Matrices","text":"use matrix() function create matrix. following arguments (input values):matrix(data, nrow, ncol, byrow, dimnames)data input vector becomes data elements matrixnrow number rows createdncol number columns createdbyrow logical argument. TRUE input vector elements arranged rowdimname names assigned rows columns let’s create matrix containing c(1:12) elements:","code":"\n\n# Elements are arranged sequentially by row\n\nmatrix_1 <- matrix(c(1:12), nrow = 4, byrow = TRUE)\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n\n# Elements are arranged sequentially by column\n\nmatrix_2 <- matrix(c(1:12), nrow = 4, byrow = FALSE)\n\nprint(matrix_2)\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\n\n\n# Specifying the number of columns instead\n\nmatrix_3 <- matrix(c(1:12), ncol = 4, byrow = TRUE)\n\nprint(matrix_3)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    5    6    7    8\n#> [3,]    9   10   11   12\n\n\n# Defining names of columns and rows in a matrix\n\nrows <- c(\"row1\", \"row2\", \"row3\", \"row4\")\n\ncols <- c(\"col1\", \"col2\", \"col3\")\n\nmatrix_4 <- matrix(c(1:12), nrow = 4, byrow = TRUE, dimnames = list(rows, cols))\n\nprint(matrix_4)\n#>      col1 col2 col3\n#> row1    1    2    3\n#> row2    4    5    6\n#> row3    7    8    9\n#> row4   10   11   12"},{"path":"lecture-03.html","id":"accessing-matrix-elements","chapter":"Lecture 03","heading":"Accessing Matrix Elements","text":"Elements matrix can accessed using column row indexes element square brackets:","code":"\n\n# Accessing the element in the 3rd column and 1st row\n\nmatrix_1[1, 3]\n#> [1] 3\n\n# Accessing the element in the 2nd column and 4th row\n\nmatrix_1[4, 2]\n#> [1] 11\n\n# Accessing only the 2nd row\n\nmatrix_1[2, ]\n#> [1] 4 5 6\n\n# Accessing only the 3rd column\n\nmatrix_1[, 3]\n#> [1]  3  6  9 12\n\n# Accessing only the 2nd and 3rd rows \n\nmatrix_1[c(2,3), ]\n#>      [,1] [,2] [,3]\n#> [1,]    4    5    6\n#> [2,]    7    8    9"},{"path":"lecture-03.html","id":"adding-and-removing-rows-columns","chapter":"Lecture 03","heading":"Adding and Removing Rows & Columns","text":"Use cbind() function add additional columns matrix:Use rbind() function add additional rows matrix:Use c() function along negative indexes remove rows columns matrix:","code":"\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_5 <- cbind(matrix_1, c(10, 20, 30, 40))\n\nprint(matrix_5)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3   10\n#> [2,]    4    5    6   20\n#> [3,]    7    8    9   30\n#> [4,]   10   11   12   40\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_6 <- rbind(matrix_1, c(10, 20, 30))\n\nprint(matrix_6)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n#> [5,]   10   20   30\n\n# Removing the 1st and 2nd rows and 1st column from a matrix\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_7 <- matrix_1[c(-1, -2), c(-1)]\n\nprint(matrix_7)\n#>      [,1] [,2]\n#> [1,]    8    9\n#> [2,]   11   12"},{"path":"lecture-03.html","id":"assigning-values-to-matrix-elements","chapter":"Lecture 03","heading":"Assigning Values to Matrix Elements","text":"","code":"\n\n# Assigning a single value\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\nmatrix_1[1, 1] <- 100\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n# Assigning a row\n\nmatrix_1[2, ] <- c(11, 22, 33)\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    8    9\n#> [4,]   10   11   12\n\n# Replace elements that are equal to 8 with 0\n\nmatrix_1[matrix_1 == 8] <- 0\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    0    9\n#> [4,]   10   11   12"},{"path":"lecture-03.html","id":"matrix-operations","chapter":"Lecture 03","heading":"Matrix Operations","text":"","code":"\n\nmatrix_8 <- matrix(1:8, nrow = 4, byrow = T)\n\nprint(matrix_8)\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n\nmatrix_9 <- matrix(1:8, nrow = 4, byrow = T)\n\nprint(matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    2\n#> [2,]    3    4\n#> [3,]    5    6\n#> [4,]    7    8\n\n# Elementwise Addition\n\nprint(matrix_8 + matrix_9)\n#>      [,1] [,2]\n#> [1,]    2    4\n#> [2,]    6    8\n#> [3,]   10   12\n#> [4,]   14   16\n\n# Elementwise Subtraction\n\nprint(matrix_8 - matrix_9)\n#>      [,1] [,2]\n#> [1,]    0    0\n#> [2,]    0    0\n#> [3,]    0    0\n#> [4,]    0    0\n\n# Elementwise Multiplication\n\nprint(matrix_8 * matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    4\n#> [2,]    9   16\n#> [3,]   25   36\n#> [4,]   49   64\n\n# Elementwise Division\n\nprint(matrix_8 / matrix_9)\n#>      [,1] [,2]\n#> [1,]    1    1\n#> [2,]    1    1\n#> [3,]    1    1\n#> [4,]    1    1\n\n# Multiplication by Constant\n\nprint(2 * matrix_8)\n#>      [,1] [,2]\n#> [1,]    2    4\n#> [2,]    6    8\n#> [3,]   10   12\n#> [4,]   14   16\n\n# Matrix Multiplication\n\nmatrix_10 <- matrix(1:8, nrow = 2, byrow = T)\n\nprint(matrix_10)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    5    6    7    8\n\nprint(matrix_8 %*% matrix_10)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   11   14   17   20\n#> [2,]   23   30   37   44\n#> [3,]   35   46   57   68\n#> [4,]   47   62   77   92\n\n# Matrix Transpose\n\nprint(t(matrix_8))\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    3    5    7\n#> [2,]    2    4    6    8"},{"path":"lecture-03.html","id":"matrix-dimensions","chapter":"Lecture 03","heading":"Matrix Dimensions","text":"Use dim() function check matrix dimensions:length() function, applied matrix, shows many elements stored matrix:","code":"\n\nprint(matrix_1)\n#>      [,1] [,2] [,3]\n#> [1,]  100    2    3\n#> [2,]   11   22   33\n#> [3,]    7    0    9\n#> [4,]   10   11   12\n\ndim(matrix_1)\n#> [1] 4 3\n\nlength(matrix_1)\n#> [1] 12"},{"path":"lecture-03.html","id":"data-frames","chapter":"Lecture 03","heading":"Data Frames","text":"data frame table column contains values one variable row contains one set values column. words, data structure represents cases observations (rows) measurements (columns). Following characteristics data frame:column names non-emptyThe data stored data frame can numeric, factor (discussed later), character typeEach column contain number data items","code":""},{"path":"lecture-03.html","id":"creating-a-data-frame","chapter":"Lecture 03","heading":"Creating a Data Frame","text":"can use data.frame() function create data frame set vectors:can use srt() function check structure data frame summary() get quick summary variables stored data frame:head() tail() functions allow us view first last 6 rows data frame, respectively (number rows can specified argument):Use colnames() function get list column names change names columns data frame:","code":"\n\nName <- c(\"James\", \"Linda\", \"Stacy\", \"Mary\", \"Tom\", \"Anna\", \"Bob\", \"Jeniffer\", \"Lucas\", \"Amy\")\n\nAge <- c(22, 56, 34, 48, 19, 31, 68, 72, 39, 52)\n\nState <- c(\"California\", \"New York\", \"New York\", \"Michigan\", \"Texas\", \"Ohio\", \"Arizona\", \"Florida\", \"Nebraska\", \"Indiana\")\n\nSalary <- c(30000, 96500, 72000, 54300, 25000, 61000, 74700, 40000, 83000, 92400)\n\ndf <- data.frame(Name, Age, State, Salary)\n\nprint(df)\n#>        Name Age      State Salary\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400\n\n# Data frame structure\n\nstr(df)\n#> 'data.frame':    10 obs. of  4 variables:\n#>  $ Name  : chr  \"James\" \"Linda\" \"Stacy\" \"Mary\" ...\n#>  $ Age   : num  22 56 34 48 19 31 68 72 39 52\n#>  $ State : chr  \"California\" \"New York\" \"New York\" \"Michigan\" ...\n#>  $ Salary: num  30000 96500 72000 54300 25000 61000 74700 40000 83000 92400\n\n# Summary of variables stored in a data frame\n\nsummary(df)\n#>      Name                Age           State          \n#>  Length:10          Min.   :19.00   Length:10         \n#>  Class :character   1st Qu.:31.75   Class :character  \n#>  Mode  :character   Median :43.50   Mode  :character  \n#>                     Mean   :44.10                     \n#>                     3rd Qu.:55.00                     \n#>                     Max.   :72.00                     \n#>      Salary     \n#>  Min.   :25000  \n#>  1st Qu.:43575  \n#>  Median :66500  \n#>  Mean   :62890  \n#>  3rd Qu.:80925  \n#>  Max.   :96500\n\nhead(df)\n#>    Name Age      State Salary\n#> 1 James  22 California  30000\n#> 2 Linda  56   New York  96500\n#> 3 Stacy  34   New York  72000\n#> 4  Mary  48   Michigan  54300\n#> 5   Tom  19      Texas  25000\n#> 6  Anna  31       Ohio  61000\n\ntail(df)\n#>        Name Age    State Salary\n#> 5       Tom  19    Texas  25000\n#> 6      Anna  31     Ohio  61000\n#> 7       Bob  68  Arizona  74700\n#> 8  Jeniffer  72  Florida  40000\n#> 9     Lucas  39 Nebraska  83000\n#> 10      Amy  52  Indiana  92400\n\nhead(df, 3)\n#>    Name Age      State Salary\n#> 1 James  22 California  30000\n#> 2 Linda  56   New York  96500\n#> 3 Stacy  34   New York  72000\n\ncolnames(df)\n#> [1] \"Name\"   \"Age\"    \"State\"  \"Salary\"\n\ncolnames(df)[1] <- \"NAME\"\n\nprint(df)\n#>        NAME Age      State Salary\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400\n\ncolnames(df) <- c(\"NAME\", \"AGE\", \"STATE\", \"SALARY\")\n\nprint(df)\n#>        NAME AGE      STATE SALARY\n#> 1     James  22 California  30000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400"},{"path":"lecture-03.html","id":"subsettingextracting-the-elementscolumnsrows-from-a-data-frame","chapter":"Lecture 03","heading":"Subsetting/Extracting the Elements/Columns/Rows from a Data Frame","text":"can use [], $, [[]] extract elements, columns, rows data frame (uses rule matrices):","code":"\n\n# Extracting the first column using its position; output: data frame\n\ndf[1]\n#>        NAME\n#> 1     James\n#> 2     Linda\n#> 3     Stacy\n#> 4      Mary\n#> 5       Tom\n#> 6      Anna\n#> 7       Bob\n#> 8  Jeniffer\n#> 9     Lucas\n#> 10      Amy\n\n# Extracting the first column using its position; output: vector\n\ndf[[1]]\n#>  [1] \"James\"    \"Linda\"    \"Stacy\"    \"Mary\"     \"Tom\"     \n#>  [6] \"Anna\"     \"Bob\"      \"Jeniffer\" \"Lucas\"    \"Amy\"\n\n# Extracting a column using its name; output: data frame\n\ndf[\"AGE\"]\n#>    AGE\n#> 1   22\n#> 2   56\n#> 3   34\n#> 4   48\n#> 5   19\n#> 6   31\n#> 7   68\n#> 8   72\n#> 9   39\n#> 10  52\n\ndf[c(\"AGE\", \"STATE\")]\n#>    AGE      STATE\n#> 1   22 California\n#> 2   56   New York\n#> 3   34   New York\n#> 4   48   Michigan\n#> 5   19      Texas\n#> 6   31       Ohio\n#> 7   68    Arizona\n#> 8   72    Florida\n#> 9   39   Nebraska\n#> 10  52    Indiana\n\n# Extracting a column using its name; output: vector\n\ndf[[\"AGE\"]]\n#>  [1] 22 56 34 48 19 31 68 72 39 52\n\n# Extracting a column using its name and '$' operator; output: vector\n\ndf$AGE\n#>  [1] 22 56 34 48 19 31 68 72 39 52\n\n# Extracting a single element\n\ndf[1, 2]\n#> [1] 22\n\n# Extracting multiple elements\n\ndf[1:4, c(1, 3)]\n#>    NAME      STATE\n#> 1 James California\n#> 2 Linda   New York\n#> 3 Stacy   New York\n#> 4  Mary   Michigan\n\n# Extracting the first row only\n\ndf[1, ]\n#>    NAME AGE      STATE SALARY\n#> 1 James  22 California  30000\n\n# Extracting the third column only\n\ndf[, 3]\n#>  [1] \"California\" \"New York\"   \"New York\"   \"Michigan\"  \n#>  [5] \"Texas\"      \"Ohio\"       \"Arizona\"    \"Florida\"   \n#>  [9] \"Nebraska\"   \"Indiana\"\n\n# Extracting all elements except the second column\n\ndf[, -2]\n#>        NAME      STATE SALARY\n#> 1     James California  30000\n#> 2     Linda   New York  96500\n#> 3     Stacy   New York  72000\n#> 4      Mary   Michigan  54300\n#> 5       Tom      Texas  25000\n#> 6      Anna       Ohio  61000\n#> 7       Bob    Arizona  74700\n#> 8  Jeniffer    Florida  40000\n#> 9     Lucas   Nebraska  83000\n#> 10      Amy    Indiana  92400\n\n# Extracting elements using logical operator\n\ndf[df$AGE < 50, ]\n#>    NAME AGE      STATE SALARY\n#> 1 James  22 California  30000\n#> 3 Stacy  34   New York  72000\n#> 4  Mary  48   Michigan  54300\n#> 5   Tom  19      Texas  25000\n#> 6  Anna  31       Ohio  61000\n#> 9 Lucas  39   Nebraska  83000"},{"path":"lecture-03.html","id":"assigning-new-value-to-data-frame-elements","chapter":"Lecture 03","heading":"Assigning New Value to Data Frame Elements","text":"Like matrices, can use <- operator assign values:","code":"\n\ndf[1, 4] <- 100000\n\nprint(df)\n#>        NAME AGE      STATE SALARY\n#> 1     James  22 California 100000\n#> 2     Linda  56   New York  96500\n#> 3     Stacy  34   New York  72000\n#> 4      Mary  48   Michigan  54300\n#> 5       Tom  19      Texas  25000\n#> 6      Anna  31       Ohio  61000\n#> 7       Bob  68    Arizona  74700\n#> 8  Jeniffer  72    Florida  40000\n#> 9     Lucas  39   Nebraska  83000\n#> 10      Amy  52    Indiana  92400"},{"path":"lecture-03.html","id":"addingremoving-columnsrows","chapter":"Lecture 03","heading":"Adding/Removing Columns/Rows","text":"","code":"\n\n# Adding a new column using `$` operator\n\ndf$EXPERIENCE = c(2, 30, 10, 22, 1, 12, 40, 55, 15, 22)\n\nprint(df)\n#>        NAME AGE      STATE SALARY EXPERIENCE\n#> 1     James  22 California 100000          2\n#> 2     Linda  56   New York  96500         30\n#> 3     Stacy  34   New York  72000         10\n#> 4      Mary  48   Michigan  54300         22\n#> 5       Tom  19      Texas  25000          1\n#> 6      Anna  31       Ohio  61000         12\n#> 7       Bob  68    Arizona  74700         40\n#> 8  Jeniffer  72    Florida  40000         55\n#> 9     Lucas  39   Nebraska  83000         15\n#> 10      Amy  52    Indiana  92400         22\n\n# Adding a new column using `cbind()` function\n\nSex <- c(\"Male\", \"Female\", \"Female\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\")\n\ndf_2 <- cbind(df, Sex)\n\nprint(df_2)\n#>        NAME AGE      STATE SALARY EXPERIENCE    Sex\n#> 1     James  22 California 100000          2   Male\n#> 2     Linda  56   New York  96500         30 Female\n#> 3     Stacy  34   New York  72000         10 Female\n#> 4      Mary  48   Michigan  54300         22 Female\n#> 5       Tom  19      Texas  25000          1   Male\n#> 6      Anna  31       Ohio  61000         12 Female\n#> 7       Bob  68    Arizona  74700         40   Male\n#> 8  Jeniffer  72    Florida  40000         55 Female\n#> 9     Lucas  39   Nebraska  83000         15   Male\n#> 10      Amy  52    Indiana  92400         22 Female\n\n# Adding a new row using `rbind()` function\n\nnew_obs <- data.frame(NAME = \"Jack\", AGE = 41, STATE = \"Texas\", SALARY = 150000, EXPERIENCE = 20)\n\ndf_3 <- rbind(df, new_obs)\n\nprint(df_3)\n#>        NAME AGE      STATE SALARY EXPERIENCE\n#> 1     James  22 California 100000          2\n#> 2     Linda  56   New York  96500         30\n#> 3     Stacy  34   New York  72000         10\n#> 4      Mary  48   Michigan  54300         22\n#> 5       Tom  19      Texas  25000          1\n#> 6      Anna  31       Ohio  61000         12\n#> 7       Bob  68    Arizona  74700         40\n#> 8  Jeniffer  72    Florida  40000         55\n#> 9     Lucas  39   Nebraska  83000         15\n#> 10      Amy  52    Indiana  92400         22\n#> 11     Jack  41      Texas 150000         20\n\n# Removing columns from a data frame using the `c()` function and negative indexes\n\ndf_4 <- df_3[, -4]\n\nprint(df_4)\n#>        NAME AGE      STATE EXPERIENCE\n#> 1     James  22 California          2\n#> 2     Linda  56   New York         30\n#> 3     Stacy  34   New York         10\n#> 4      Mary  48   Michigan         22\n#> 5       Tom  19      Texas          1\n#> 6      Anna  31       Ohio         12\n#> 7       Bob  68    Arizona         40\n#> 8  Jeniffer  72    Florida         55\n#> 9     Lucas  39   Nebraska         15\n#> 10      Amy  52    Indiana         22\n#> 11     Jack  41      Texas         20\n\n# Removing columns by assigning a `NULL` value\n\ndf_3[c(\"AGE\", \"SALARY\")] <- NULL\n\nprint(df_3)\n#>        NAME      STATE EXPERIENCE\n#> 1     James California          2\n#> 2     Linda   New York         30\n#> 3     Stacy   New York         10\n#> 4      Mary   Michigan         22\n#> 5       Tom      Texas          1\n#> 6      Anna       Ohio         12\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n#> 9     Lucas   Nebraska         15\n#> 10      Amy    Indiana         22\n#> 11     Jack      Texas         20\n\n# Removing rows from a data frame\n\ndf_3[-11, ]\n#>        NAME      STATE EXPERIENCE\n#> 1     James California          2\n#> 2     Linda   New York         30\n#> 3     Stacy   New York         10\n#> 4      Mary   Michigan         22\n#> 5       Tom      Texas          1\n#> 6      Anna       Ohio         12\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n#> 9     Lucas   Nebraska         15\n#> 10      Amy    Indiana         22"},{"path":"lecture-03.html","id":"re-ordering-columnsrows-in-a-data-frame","chapter":"Lecture 03","heading":"Re-ordering Columns/Rows in a Data Frame","text":"order re-order columns data frame, pass vector desired order columns using [] operator:","code":"\n\n# Re-ordering columns in a data frame\n\ndf_3[, c(\"EXPERIENCE\", \"NAME\", \"STATE\")]\n#>    EXPERIENCE     NAME      STATE\n#> 1           2    James California\n#> 2          30    Linda   New York\n#> 3          10    Stacy   New York\n#> 4          22     Mary   Michigan\n#> 5           1      Tom      Texas\n#> 6          12     Anna       Ohio\n#> 7          40      Bob    Arizona\n#> 8          55 Jeniffer    Florida\n#> 9          15    Lucas   Nebraska\n#> 10         22      Amy    Indiana\n#> 11         20     Jack      Texas\n\n# Re-ordering rows in a data frame\n\ndf_3[order(df_3$EXPERIENCE), ]     # Ascending order\n#>        NAME      STATE EXPERIENCE\n#> 5       Tom      Texas          1\n#> 1     James California          2\n#> 3     Stacy   New York         10\n#> 6      Anna       Ohio         12\n#> 9     Lucas   Nebraska         15\n#> 11     Jack      Texas         20\n#> 4      Mary   Michigan         22\n#> 10      Amy    Indiana         22\n#> 2     Linda   New York         30\n#> 7       Bob    Arizona         40\n#> 8  Jeniffer    Florida         55\n\ndf_3[order(df_3$EXPERIENCE, decreasing = TRUE), ] # Descending order\n#>        NAME      STATE EXPERIENCE\n#> 8  Jeniffer    Florida         55\n#> 7       Bob    Arizona         40\n#> 2     Linda   New York         30\n#> 4      Mary   Michigan         22\n#> 10      Amy    Indiana         22\n#> 11     Jack      Texas         20\n#> 9     Lucas   Nebraska         15\n#> 6      Anna       Ohio         12\n#> 3     Stacy   New York         10\n#> 1     James California          2\n#> 5       Tom      Texas          1"},{"path":"lecture-03.html","id":"checking-dimensions-of-a-data-frame","chapter":"Lecture 03","heading":"Checking Dimensions of a Data Frame","text":"","code":"\n\n# Data frame dimensions\n\ndim(df)\n#> [1] 10  5\n\n# Number of columns in a data frame\n\nncol(df)\n#> [1] 5\n\n# Number of rows in a data frame\n\nnrow(df)\n#> [1] 10"},{"path":"lecture-03.html","id":"factors","chapter":"Lecture 03","heading":"Factors","text":"Factor special type vectors used categorize data store levels. can store character integer types data. useful columns limited number unique values. instance, Female Male, TRUE FALSE etc.","code":""},{"path":"lecture-03.html","id":"creating-factors","chapter":"Lecture 03","heading":"Creating Factors","text":"Use factor() function R create factor:create ordered factor, use order argument inside factor() function:can convert numeric variable factor dividing intervals (segments) using cut() function:can even add labels groups:","code":"\n\nvec1 <- c(\"YES\", \"NO\", \"YES\", \"YES\", \"YES\", \"NO\", \"NO\", \"YES\")\n\nprint(vec1)\n#> [1] \"YES\" \"NO\"  \"YES\" \"YES\" \"YES\" \"NO\"  \"NO\"  \"YES\"\n\nis.factor(vec1)\n#> [1] FALSE\n\nfac1 <- factor(vec1)\n\nprint(fac1)\n#> [1] YES NO  YES YES YES NO  NO  YES\n#> Levels: NO YES\n\nis.factor(fac1)\n#> [1] TRUE\n\n\n#############\n\n\nvec2 <- c(\"Jazz\", \"Rock\", \"Classic\", \"Pop\", \"Classic\", \"Jazz\", \"Jazz\", \"Rock\")\n\nfac2 <- factor(vec2)\n\nprint(fac2)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\n\n#############\n\n\nvec3 <- c(1, 2, 3, 2, 2, 3, 1, 3, 2, 3, 1, 1)\n\nfac3 <- factor(vec3)\n\nprint(fac3)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 2 3\n\nfac4 <- factor(vec3, ordered = TRUE)\n\nprint(fac4)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 < 2 < 3\n\nage_factored <- cut(df_4$AGE, 3)\n\nprint(age_factored)\n#>  [1] (18.9,36.7] (54.3,72.1] (18.9,36.7] (36.7,54.3]\n#>  [5] (18.9,36.7] (18.9,36.7] (54.3,72.1] (54.3,72.1]\n#>  [9] (36.7,54.3] (36.7,54.3] (36.7,54.3]\n#> Levels: (18.9,36.7] (36.7,54.3] (54.3,72.1]\n\nage_factored <- cut(df_4$AGE, 3, labels = c(\"Group1\", \"Group2\", \"Group3\"))\n\nprint(age_factored)\n#>  [1] Group1 Group3 Group1 Group2 Group1 Group1 Group3 Group3\n#>  [9] Group2 Group2 Group2\n#> Levels: Group1 Group2 Group3"},{"path":"lecture-03.html","id":"factor-levels","chapter":"Lecture 03","heading":"Factor Levels","text":"Use levels() function see levels factor variable :can also set levels adding levels argument inside factor() function:can change order levels passing level argument factor function desired order levels:","code":"\n\nlevels(fac1)\n#> [1] \"NO\"  \"YES\"\n\nlevels(fac2)\n#> [1] \"Classic\" \"Jazz\"    \"Pop\"     \"Rock\"\n\nlevels(fac3)\n#> [1] \"1\" \"2\" \"3\"\n\nlevels(fac4)\n#> [1] \"1\" \"2\" \"3\"\n\n\nvec2 <- c(\"Jazz\", \"Rock\", \"Classic\", \"Pop\", \"Classic\", \"Jazz\", \"Jazz\", \"Rock\")\n\nfac5 <- factor(vec2, levels = c(\"Classic\", \"Jazz\", \"Pop\", \"Rock\", \"Other\"))\n\nprint(fac5)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock Other\n\n\nprint(fac3)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 1 2 3\n\nfac6 <- factor(vec3, levels = c(3, 1, 2))\n\nprint(fac6)\n#>  [1] 1 2 3 2 2 3 1 3 2 3 1 1\n#> Levels: 3 1 2"},{"path":"lecture-03.html","id":"accessing-factor-elements","chapter":"Lecture 03","heading":"Accessing Factor Elements","text":"can access elements stored factor way done vectors, using [].","code":""},{"path":"lecture-03.html","id":"assigningchanging-values-toof-factor-elements","chapter":"Lecture 03","heading":"Assigning/Changing Values to/of Factor Elements","text":"can assign new value factor elements using assignment sign <-:happens assign new value already specified factor levels?generate NA, Opera option among levels specified variable. add value, first need add levels:","code":"\n\nprint(fac2)\n#> [1] Jazz    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac2[1] <- \"Classic\"\n\nprint(fac2)\n#> [1] Classic Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nprint(fac2)\n#> [1] Classic Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac2[1] <- \"Opera\"\n#> Warning in `[<-.factor`(`*tmp*`, 1, value = \"Opera\"):\n#> invalid factor level, NA generated\n\nprint(fac2)\n#> [1] <NA>    Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock\n\nfac7 <- factor(fac2, levels = c(\"Classic\", \"Jazz\", \"Pop\", \"Rock\", \"Other\", \"Opera\"))\n\nfac7[1] <- \"Opera\"\n\nprint(fac7)\n#> [1] Opera   Rock    Classic Pop     Classic Jazz    Jazz   \n#> [8] Rock   \n#> Levels: Classic Jazz Pop Rock Other Opera"},{"path":"lecture-03.html","id":"generating-factors","chapter":"Lecture 03","heading":"Generating Factors","text":"can generate factor levels using gl() function. takes two integers input values indicate many levels many times level used.","code":"\n\nfac8 <- gl(4, 5, labels = c(\"Fall\", \"Winter\", \"Spring\", \"Summer\"))\n\nprint(fac8)\n#>  [1] Fall   Fall   Fall   Fall   Fall   Winter Winter Winter\n#>  [9] Winter Winter Spring Spring Spring Spring Spring Summer\n#> [17] Summer Summer Summer Summer\n#> Levels: Fall Winter Spring Summer"},{"path":"lecture-03.html","id":"counting-factor-elementsfrequency-of-levels","chapter":"Lecture 03","heading":"Counting Factor Elements/Frequency of Levels","text":"","code":"\n\n# Calculating a number of elements stored in the factor\n\nlength(fac2)\n#> [1] 8\n\n# Displaying a frequency of each level of the factor\n\ntable(fac2)\n#> fac2\n#> Classic    Jazz     Pop    Rock \n#>       2       2       1       2"},{"path":"lecture-03.html","id":"converting-numeric-data-into-factors-and-back","chapter":"Lecture 03","heading":"Converting Numeric Data into Factors and Back","text":"","code":"\n\n# Converting numeric data into factors using as.factor() function\n\nvec3 <- c(0, 1, 2, 2, 1, 0, 2, 1, 0)\n\nfac9 <- as.factor(vec3)\n\nprint(fac9)\n#> [1] 0 1 2 2 1 0 2 1 0\n#> Levels: 0 1 2\n\n# Converting factors back into numeric data using as.numeric() function (part I)\n\nas.numeric(fac9)\n#> [1] 1 2 3 3 2 1 3 2 1\n\n# Converting factors back into numeric data using as.numeric() function (part II)\n\nas.numeric(levels(fac9)[fac9])\n#> [1] 0 1 2 2 1 0 2 1 0"},{"path":"lecture-04.html","id":"lecture-04","chapter":"Lecture 04","heading":"Lecture 04","text":" ","code":""},{"path":"lecture-04.html","id":"r-markdown-files","chapter":"Lecture 04","heading":"R Markdown Files","text":"R Markdown provides easy way produce rich, fully-documented reproducible analysis. combines code, results, commentary, metadata needed reproduce analysis R. allows include chunks code file along text. R Markdown supports many output formats PDF, Word, slideshows, presentations etc.R Markdown files can used many ways. instance, can utilized communicating decision makers, wants focus conclusions, code behind analysis; collaborating data analysts, interested conclusions reached . addition, can used environment analysis.Even lecture notes written using R Markdown files. lecture learn create R Markdown file basic functionalities. using R Markdown files create homework assignments.","code":""},{"path":"lecture-04.html","id":"creating-r-markdown-files","chapter":"Lecture 04","heading":"Creating R Markdown Files","text":"R Markdown files .Rmd extensions. create R Markdown files, need rmarkdown package. don’t need explicitly install load package, RStudio automatically needed.can create new R Markdown file File > New File > R Markdown…mentioned earlier, R Markdown can produce files various formats (PDF, Word, HTML etc.). asked submit homework assignments PDF format, class focus output format. PDF output format requires installing LaTex distribution machine. several traditional options including MikTeX, MacTeX, TeX Live, recommended use TinyTeX.can install TinyTeX R package tinytex. Run following code console:","code":"\ntinytex:: install_tinytex()"},{"path":"lecture-04.html","id":"r-markdown-file-components","chapter":"Lecture 04","heading":"R Markdown File Components","text":"","code":""},{"path":"lecture-04.html","id":"yaml","chapter":"Lecture 04","heading":"YAML","text":"top part R Markdown file called YAML header. surrounded --s stores metadata needed document (example, file title, author, output format etc.)","code":""},{"path":"lecture-04.html","id":"text-formatting-with-markdown","chapter":"Lecture 04","heading":"Text Formatting with Markdown","text":"","code":""},{"path":"lecture-04.html","id":"fonts","chapter":"Lecture 04","heading":"Fonts","text":"Markdown designed easy read, write, learn. can find basic guide help format texts homework assignments:need type plain text, like word document (just type ).need type plain text, like word document (just type ).Use **  ** operator change font type bold. instance, Hello typed **Hello**.Use **  ** operator change font type bold. instance, Hello typed **Hello**.Use _   _ operator use italics font. example, Hello typed _Hello_.Use _   _ operator use italics font. example, Hello typed _Hello_.Use ~~ ~~ operator cross words . example, Hello typed ~~Hello~~.Use ~~ ~~ operator cross words . example, Hello typed ~~Hello~~.","code":""},{"path":"lecture-04.html","id":"headers","chapter":"Lecture 04","heading":"Headers","text":"can create headers text using # operator control size simply adding one # front text like denote header.","code":"\n\n# Top Level Header (For example, Question 1)\n\n## Second Level Header (For example, Question 1 part a)\n\n### Third Level Header\n\n#### and so on"},{"path":"lecture-04.html","id":"block-quotes","chapter":"Lecture 04","heading":"Block Quotes","text":"can create block quote using > operator. example line belowwill produce following result:first block quote","code":"\n> Your first block quote"},{"path":"lecture-04.html","id":"lists-1","chapter":"Lecture 04","heading":"Lists","text":"R Markdown can create ordered unordered lists. create unordered list, use * operator:Bullet point 1Bullet point 2\nbullet point 2 \nbullet point 2 b\nbullet point 2 abullet point 2 bTo create ordered lists, simply use numbers:Bullet point 1Bullet point 2\nbullet point 2a\nbullet point 2b\nbullet point 2abullet point 2b","code":"* Bullet point 1\n\n* Bullet point 2\n\n  * bullet point 2a\n\n  * bullet point 2b1. Bullet point 1\n\n2. Bullet point 2\n   * bullet point 2a\n   * bullet point 2b"},{"path":"lecture-04.html","id":"tables","chapter":"Lecture 04","heading":"Tables","text":"Use following formatting style create tables R Markdown:","code":"First Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell"},{"path":"lecture-04.html","id":"links","chapter":"Lecture 04","heading":"Links","text":"Use following format insert link text:produces link desired webpage can included text: first link","code":"[Your first link](http://posit.co)"},{"path":"lecture-04.html","id":"inline-equations","chapter":"Lecture 04","heading":"Inline Equations","text":"Use $ $ operator include equations text. example, \\(= \\pi*r^{2}\\) typed $= \\pi*r^{2}$.","code":""},{"path":"lecture-04.html","id":"line-breaks","chapter":"Lecture 04","heading":"Line Breaks","text":"order start new paragraph new line, need sure white space exists two paragraphs/line:first lines.another line.Another useful way divide different parts file including horizontal lines. can achieve using *** operator:produce horizontal line .Finally, want start paragraph line new page, use \\newpage command:","code":"This is the first lines.\n\n\nAnd here we have another line.***\\newpage"},{"path":"lecture-04.html","id":"r-chunks-of-code","chapter":"Lecture 04","heading":"R Chunks of Code","text":"addition plain text, can also run R codes inside file include along plain text show code used produce results. integral important part homework assignments always need include HW file unless otherwise instructed.can run include R code manually typing chunk deliminiters ```{r} ```. display code used results code produced. example, following chunk run code specified inside produce corresponding output:","code":"```{r}\n\nprint(2 + 2)\n\n``` #> [1] 4"},{"path":"lecture-04.html","id":"options","chapter":"Lecture 04","heading":"Options","text":"Chunk can customized options, , arguments supplied chunk header. nearly 60 options can use customize code, class discuss important commonly used options:eval = FALSE prevents code evaluated. results, code run results produced. useful displaying example code.include = FALSE runs code, doesn’t show code results final document.echo = FALSE prevents code, results appearing finished file.results = 'hide' prevents results, code appearing finished file.","code":"```{r, eval = FALSE}\nprint(2 + 2)\n``` ```{r, include = FALSE}\nprint(2 + 2)\n``` ```{r, echo = FALSE}\nprint(2 + 2)\n``` ```{r, results = 'hide'}\nprint(2 + 2)\n``` "},{"path":"lecture-04.html","id":"generating-r-markdown-files","chapter":"Lecture 04","heading":"Generating R Markdown Files","text":"done text code want include file, can generate R Markdown files clicking knit button top editor pane. drop-menu allows pick output formats. recommended use HTML format preparing file fixing error. display file Viewer tab nicely conveniently. finalize code text, can generate file clicking knit button selecting PDF output format.","code":""},{"path":"lecture-04.html","id":"additional-resources","chapter":"Lecture 04","heading":"Additional Resources","text":"discussed basic crucial parts R Markdown files creating, formatting, generating files. course, R Markdown allows much . Unfortunately, beyond scope class don’t enough time cover topics. case interested exploring topic , can find list useful links resources.R Markdown WebpageR Markdown Reference GuideR Markdown CookbookR Markdown: Definitive Guide","code":""},{"path":"lecture-05.html","id":"lecture-05","chapter":"Lecture 05","heading":"Lecture 05","text":" Control structures R used control flow execution various R expressions. require programmer specify one conditions evaluated tested program, along statement statements executed condition determined TRUE, optionally, statements executed condition determined FALSE. words, control structures allow respond inputs features data execute different R expressions accordingly.class discuss several commonly used control structures -else statements, loops, well break next commands. move topics, first let’s discuss relational logical operators.","code":""},{"path":"lecture-05.html","id":"relational-and-logical-operations","chapter":"Lecture 05","heading":"Relational and Logical Operations","text":"","code":""},{"path":"lecture-05.html","id":"comparison-operators","chapter":"Lecture 05","heading":"Comparison Operators","text":" basic relational operators called comparison operators listed table :possible outputs operations either TRUE FALSE. examples comparison operators:applied vectors, operators element-wise comparisons (first element first vector compared first element second vector ). Suppose following two vectors:,","code":"\n\nprint (5 == 5)\n#> [1] TRUE\n\nprint(5 == 7)\n#> [1] FALSE\n\nprint(5 != 5)\n#> [1] FALSE\n\nprint(5 != 10)\n#> [1] TRUE\n\nprint(5 < 2)\n#> [1] FALSE\n\nprint(5 <= 4)\n#> [1] FALSE\n\nx <- c(1, 2, 3, 4)\n\nprint(x)\n#> [1] 1 2 3 4\n\ny <- c(4, 2, 3, 1)\n\nprint(y)\n#> [1] 4 2 3 1\n\nprint(x == y)\n#> [1] FALSE  TRUE  TRUE FALSE\n\nprint(x != y)\n#> [1]  TRUE FALSE FALSE  TRUE\n\nprint(x >= y)\n#> [1] FALSE  TRUE  TRUE  TRUE"},{"path":"lecture-05.html","id":"logical-operators","chapter":"Lecture 05","heading":"Logical Operators","text":" Logical operators used combine conditional statements:examples:","code":"\n\n##  & Operator\n\nprint(TRUE & TRUE)\n#> [1] TRUE\n\nprint (TRUE & FALSE)\n#> [1] FALSE\n\nprint(FALSE & FALSE)\n#> [1] FALSE\n\nprint (5 == 5 & 10 < 6)\n#> [1] FALSE\n\nprint(4!= 3 & 2 < 9)\n#> [1] TRUE\n\nprint(x == y & x < y)\n#> [1] FALSE FALSE FALSE FALSE\n\n\n##  | Operator\n\nprint(TRUE | TRUE)\n#> [1] TRUE\n\nprint (TRUE | FALSE)\n#> [1] TRUE\n\nprint(FALSE | FALSE)\n#> [1] FALSE\n\nprint (5 == 5 | 10 < 6)\n#> [1] TRUE\n\nprint(4!= 3 | 2 < 9)\n#> [1] TRUE\n\nprint(x == y | x < y)\n#> [1]  TRUE  TRUE  TRUE FALSE\n\n\n##  ! Operator\n\nprint (!TRUE)\n#> [1] FALSE\n\nprint(!FALSE)\n#> [1] TRUE\n\nprint(!(4<2))\n#> [1] TRUE\n\nprint(!(2 == 2 & 3 < 4))\n#> [1] FALSE"},{"path":"lecture-05.html","id":"conditional-statements","chapter":"Lecture 05","heading":"Conditional Statements","text":"","code":""},{"path":"lecture-05.html","id":"if-statement","chapter":"Lecture 05","heading":"IF Statement","text":"“statement” written keyword, used specify block code executed condition TRUE:code executed conditional statement inside parentheses FALSE. Check :","code":"\n\nif (5 > 2) {\n  \n  print(\"5 is greater than 2\")\n  \n}\n#> [1] \"5 is greater than 2\"\n\nif (5 < 2) {\n  \n  print(\"5 is greater than 2\")\n  \n}"},{"path":"lecture-05.html","id":"if---else-statement","chapter":"Lecture 05","heading":"IF - ELSE Statement","text":"-else combination probably commonly used control structure R. structure allows test condition act depending whether ’s TRUE FALSE. condition TRUE, code given curly brackets clause executed. FALSE, code curly brackets else clause executed:Now try example:can pass many conditions like adding else clause:Try different values:","code":"\n\na <- 5 ; b <- 2\n\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else {\n  \n  print(\"b is not greater than a\")\n}\n#> [1] \"b is not greater than a\"\n\na <- 2 ; b <- 5\n\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else {\n  \n  print(\"b is not greater than a\")\n}\n#> [1] \"b is greater than a\"\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else if (a == b) {\n  \n  print (\"a and b are equal\")\n  \n} else {\n  \n  print (\"a is greater than b\")\n  \n}\n#> [1] \"b is greater than a\"\na <- 2; b <- 2\n\nif (b > a) {\n  \n  print (\"b is greater than a\")\n  \n} else if (a == b) {\n  \n  print (\"a and b are equal\")\n  \n} else {\n  \n  print (\"a is greater than b\")\n  \n}\n#> [1] \"a and b are equal\""},{"path":"lecture-05.html","id":"nested-if-else-statements","chapter":"Lecture 05","heading":"Nested IF-ELSE Statements","text":"can also statements inside statements, called nested statements.Now try x = 15 x = 5:can multiple conditional statements -else clause combined together:","code":"\n\nx <- 50\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"Above ten\"\n#> [1] \"and also above 20!\"\n\nx <- 15\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"Above ten\"\n#> [1] \"but not above 20.\"\n\nx <- 5\n\nif (x > 10) {\n  \n  print(\"Above ten\")\n  \n  if (x > 20) {\n    \n    print(\"and also above 20!\")\n    \n  } else {\n    \n    print(\"but not above 20.\")\n    \n  }\n  \n} else {\n  \n  print(\"below 10.\")\n  \n}\n#> [1] \"below 10.\"\n\na <- 200; b <- 33; c <- 500\n\n\n##  &\n\nif (a > b & c == a) {\n  \n  print(\"Both conditions are true\")\n  \n} else {\n  \n  print (\"At least one is false\")\n}\n#> [1] \"At least one is false\"\n\n\n\n##  |\n\nif (a > b | c == a) {\n  \n  print(\"At least one is true\")\n  \n} else {\n  \n  print (\"Both conditions are false\")\n}\n#> [1] \"At least one is true\""},{"path":"lecture-05.html","id":"ifelse-function","chapter":"Lecture 05","heading":"ifelse() Function","text":"Given works single TRUE FALSE, might wonder vector logical values. ifelse() can handle vectors logical values. first argument ifelse() function vector logical values,second argument value produces element logical vector TRUE, third argument value produces element logical vector FALSE. Check example :","code":"\nx <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nifelse(x %% 2 == 0, \"even\", \"odd\")\n#>  [1] \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\"\n#>  [9] \"odd\"  \"even\""},{"path":"lecture-05.html","id":"some-useful-functions-any-and-all","chapter":"Lecture 05","heading":"Some Useful Functions: any() and all()","text":"() () functions come handy work conditional statement. examples:","code":"\nx <- c(-2, -1, 0, 1, 2)\n\n## all(). It return TRUE if all elements of a vector satisfy the condition\n\nprint(all(x > 0))\n#> [1] FALSE\n\n## any(). It return TRUE if at least one of elements in a vector satisfies the condition\n\nprint(any(x > 0))\n#> [1] TRUE\n\n\n## Here is an example \n\nif(all(x < 0)) {\n  \n  print(\"all are negative\")\n  \n} else {\n  \n  print (\"not all of them are negative\")\n  \n}\n#> [1] \"not all of them are negative\""},{"path":"lecture-05.html","id":"for-loops","chapter":"Lecture 05","heading":"For Loops","text":"may situation need execute block code multiple times. general, statements executed sequentially. first statement function executed first, followed second, .Programming languages provide various control structures allow complicated execution paths. loop statement allows us execute statement groups statements multiple times (iterate). sequence instructions repeated certain condition reached. basic commonly used type loops loop. general format loop follows:three key aspects loops: loop object, loop vector, loop code.Loop object: object change iteration loop. usually letter like .Loop vector: vector specifying values loop object take loop. can specify values way ’d like (long ’s vector).Loop code: code executed values loop vector.can find examples loops can utilized:","code":"\n\nfor(loop.object in loop.vector) {\n\n  LOOP.CODE\n\n  }\n\n## Printing numbers from 1 to 10\n\nfor (i in 1:10){\n  \n  print (i)\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n\n## Printing elements of the vector x\n\nx <- c(10, 20, 30, 40, 50)\n\nfor (i in 1:length(x)){\n  \n  print(x[i])\n  \n}\n#> [1] 10\n#> [1] 20\n#> [1] 30\n#> [1] 40\n#> [1] 50\n\n## Creating and populating an empty vector z\n\nz <- c()   # creating an empty vector.\n\nfor (i in 1:5){\n  \n  z[i] <- 2*i\n  \n}\n\nprint(z)\n#> [1]  2  4  6  8 10\n\n## Creating and populating an empty list\n\na <- list()   # creating an empty list\n\nfor (i in 1:4){\n  \n  a[[i]] <- rnorm(i)\n  \n}\n\nprint(a)\n#> [[1]]\n#> [1] -0.4449204\n#> \n#> [[2]]\n#> [1] 0.6877384 0.5138414\n#> \n#> [[3]]\n#> [1] -0.05192922  2.35895255 -0.30947434\n#> \n#> [[4]]\n#> [1] -0.22119227  0.05511434  0.61745288  0.05013974\n\n## Updating elements of the vector x\n\nx <- c(1, 2, 3, 4, 5)\n\n\nfor (i in 1:length(x)){\n  \n  x[i] <- x[i] ^ 2\n  \n}\n\nprint(x)\n#> [1]  1  4  9 16 25\n## Summing up numbers from 1 to 100\n\ncurrent.sum <- 0\n\n\nfor(i in 1:100) {\n  \n  current.sum <- current.sum + i\n  \n}"},{"path":"lecture-05.html","id":"break-statement","chapter":"Lecture 05","heading":"Break Statement","text":"Loop control statements change execution normal sequence. Break statement stops execution loop condition specified met. words, stops looped items. example,","code":"\n\nfor(i in 1:60) {\n  \n  if(i > 15){\n    \n    break\n    \n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n#> [1] 11\n#> [1] 12\n#> [1] 13\n#> [1] 14\n#> [1] 15"},{"path":"lecture-05.html","id":"next-statement","chapter":"Lecture 05","heading":"Next Statement","text":"next statement, can skip undesired iteration without terminating loop:","code":"\n## Skipping even numbers\n\nfor(i in 1:100) {\n  \n  if(i %% 2 == 0){\n    \n    next\n    \n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 3\n#> [1] 5\n#> [1] 7\n#> [1] 9\n#> [1] 11\n#> [1] 13\n#> [1] 15\n#> [1] 17\n#> [1] 19\n#> [1] 21\n#> [1] 23\n#> [1] 25\n#> [1] 27\n#> [1] 29\n#> [1] 31\n#> [1] 33\n#> [1] 35\n#> [1] 37\n#> [1] 39\n#> [1] 41\n#> [1] 43\n#> [1] 45\n#> [1] 47\n#> [1] 49\n#> [1] 51\n#> [1] 53\n#> [1] 55\n#> [1] 57\n#> [1] 59\n#> [1] 61\n#> [1] 63\n#> [1] 65\n#> [1] 67\n#> [1] 69\n#> [1] 71\n#> [1] 73\n#> [1] 75\n#> [1] 77\n#> [1] 79\n#> [1] 81\n#> [1] 83\n#> [1] 85\n#> [1] 87\n#> [1] 89\n#> [1] 91\n#> [1] 93\n#> [1] 95\n#> [1] 97\n#> [1] 99"},{"path":"lecture-05.html","id":"for-loops-combined-with-if-else-statements","chapter":"Lecture 05","heading":"For Loops Combined with If-Else Statements","text":"can even combine loops -else statements:","code":"\n\nx <- 1:10\n\nfor (i in 1:length(x)){\n  \n  if(x[i] %% 2 == 0){\n    \n    print(paste(\"The number\", x[i], \"is even\"))\n    \n  } else {\n    \n    print(paste(\"The number\", x[i], \"is odd\"))\n    \n  }\n  \n}\n#> [1] \"The number 1 is odd\"\n#> [1] \"The number 2 is even\"\n#> [1] \"The number 3 is odd\"\n#> [1] \"The number 4 is even\"\n#> [1] \"The number 5 is odd\"\n#> [1] \"The number 6 is even\"\n#> [1] \"The number 7 is odd\"\n#> [1] \"The number 8 is even\"\n#> [1] \"The number 9 is odd\"\n#> [1] \"The number 10 is even\""},{"path":"lecture-05.html","id":"nested-for-loops","chapter":"Lecture 05","heading":"Nested For Loops","text":"Nested loops commonly needed multidimensional hierarchical data structures (e.g. matrices, lists). Nesting beyond 2 3 levels often makes difficult read/understand code. find need large number nested loops, may want break loops using functions (discussed next lecture). example nested loop:","code":"\n\n## Creating and populating an empty matrix\n\nmatrix1 <- matrix(ncol = 4, nrow = 5) # creating an empty matrix\n\n\nfor (i in 1:dim(matrix1)[1]){\n  \n  for (j in 1:dim(matrix1)[2]){\n    \n    matrix1[i, j] <- i*j\n    \n  }\n}\n\nprint(matrix1)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    2    3    4\n#> [2,]    2    4    6    8\n#> [3,]    3    6    9   12\n#> [4,]    4    8   12   16\n#> [5,]    5   10   15   20"},{"path":"lecture-05.html","id":"while-loops","chapter":"Lecture 05","heading":"While Loops","text":"loops begin testing condition. TRUE, execute loop body. loop body executed, condition tested , forth, condition FALSE, loop exits.","code":"\n\ni <- 1\n\nwhile (i < 10){\n  \n  print(i)\n  \n  i <- i + 1\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9"},{"path":"lecture-05.html","id":"while-loops-with-next-statements","chapter":"Lecture 05","heading":"While Loops with Next Statements","text":"loops can combined next statements:loops can potentially result infinite loops written properly. Use care! accidentally created executed infinite loops, run forever take storage R. stop infinite loop, press red stop sign shows top right corner console. Can check tell wrong loops given :","code":"\n\n# Printing odd numbers that are less than 15\n\ni <- 0\n\nwhile (i < 15){\n  \n  i <- i + 1\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n  print(i)\n  \n}\n#> [1] 1\n#> [1] 3\n#> [1] 5\n#> [1] 7\n#> [1] 9\n#> [1] 11\n#> [1] 13\n#> [1] 15\n\ni <- 1\n\nwhile (i < 15){\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n\n  print(i)\n    \n  i <- i + 1\n  \n}\n\ni <- 1\n\nwhile (i < 15){\n  \n  print(i)\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n  i <- i + 1\n  \n}\n\ni <- 1\n\nwhile (i < 15){\n  \n  print(i)\n  \n  i <- i + 1\n  \n  if(i %% 2 == 0){\n    \n    next\n  }\n  \n}"},{"path":"lecture-05.html","id":"while-loops-with-break-statements","chapter":"Lecture 05","heading":"While Loops with Break Statements","text":"Similarly, loops can combined break statements:Can tell output loops without running ?","code":"\n\ni <- 1\n\nwhile (i < 20){\n  \n  print (i)\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  i <- i + 1\n  \n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\ni <- 1\n\nwhile (i < 20){\n  \n  print (i)\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  i <- i + 1\n  \n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\ni <- 1\n\nwhile (i < 20){\n  \n  if (i == 5){\n    \n    break\n    \n  }\n  \n  print (i)\n  \n  i <- i + 1\n  \n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4"}]
